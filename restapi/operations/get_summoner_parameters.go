package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSummonerParams creates a new GetSummonerParams object
// with the default values initialized.
func NewGetSummonerParams() GetSummonerParams {
	var ()
	return GetSummonerParams{}
}

// GetSummonerParams contains all the bound params for the get summoner operation
// typically these are obtained from a http.Request
//
// swagger:parameters getSummoner
type GetSummonerParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*name of the summoner
	  Required: true
	  In: path
	*/
	Name string
	/*whether or not to refresh the data
	  In: query
	*/
	Refresh *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetSummonerParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rName, rhkName, _ := route.Params.GetOK("name")
	if err := o.bindName(rName, rhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qRefresh, qhkRefresh, _ := qs.GetOK("refresh")
	if err := o.bindRefresh(qRefresh, qhkRefresh, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSummonerParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Name = raw

	return nil
}

func (o *GetSummonerParams) bindRefresh(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("refresh", "query", "bool", raw)
	}
	o.Refresh = &value

	return nil
}
