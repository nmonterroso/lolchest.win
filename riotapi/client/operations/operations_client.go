package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetChampionData gets static champion data
*/
func (a *Client) GetChampionData(params *GetChampionDataParams, authInfo runtime.ClientAuthInfoWriter) (*GetChampionDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChampionDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChampionData",
		Method:             "GET",
		PathPattern:        "/api/lol/static-data/{region}/v1.2/champion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChampionDataReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChampionDataOK), nil
}

/*
GetStaticAssetVersions gets list of static asset versions
*/
func (a *Client) GetStaticAssetVersions(params *GetStaticAssetVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStaticAssetVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStaticAssetVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStaticAssetVersions",
		Method:             "GET",
		PathPattern:        "/api/lol/static-data/{region}/v1.2/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStaticAssetVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStaticAssetVersionsOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
